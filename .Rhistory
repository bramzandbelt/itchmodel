)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
?diffusion
?itchmodel::diffusion
?dai_busemeyer_diffusion
?itchmodel::dai_busemeyer_diffusion
>itchmodel::dai_busemeyer_diffusion
?itchmodel::dai_busemeyer_diffusion
itchmodel::diffusion(d = -53, sigma = 1, theta = 10, z = 9)
term1
term2
(1 - term1) / (1 - term2)
-2 * d * (theta + z) / sigma^2
-4 * d * theta / sigma^2
sigma
theta
d
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 2
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
term1
term2
d
theta
sigma
-4 * d * theta / sigma^2
exp(-4 * d * theta / sigma^2)
term2 <- exp(-4 * d * theta / sigma^2)
term2
term2 term1 <- exp(-2 * d * (theta + z) / sigma^2)
term2 <- exp(-4 * d * theta / sigma^2)
term1 < .Machine$double.min.exp
term1
term1 <- exp(-2 * d * (theta + z) / sigma^2)
term2 <- exp(-4 * d * theta / sigma^2)
term2
term1
library(itchmodel)
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
term1
term12
term2
term1 < .Machine$double.min.exp
any(term1 < .Machine$double.min.exp)
any(term2 < .Machine$double.min.exp)
any(term2 > .Machine$double.max.exp)
any(term1 > .Machine$double.max.exp)
term1 > .Machine$double.max.exp
term1 > .Machine$double.max.exp
term1
term1 > .Machine$double.xmin
terterm2 > .Machine$double.xmax
term2 > .Machine$double.xmax
(term1 < .Machine$double.xmin)
(term1 > .Machine$double.xmax)
(term2 < .Machine$double.xmin)
(term2 > .Machine$double.xmax)
term2[1]
term2[1] <- .Machine$double.max.exp + 2
(term2 > .Machine$double.xmax)
term2
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 20
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
term1
(term1 < .Machine$double.xmin)
(term1 > .Machine$double.xmin)
term1
dplyr::filter(term1 > .Machine$double.max.exp)
term1
tib
df <- tib$data[[1]]
df
x <- unlist(tib$parameters[[1]])
x
df <-
df %>%
dplyr::mutate(um_ss = convert(m_ss, type = 'power', param = x['alpha']),
um_ll = convert(m_ll, type = 'power', param = x['alpha']),
pt_ss = convert(t_ss, type = 'power', param = x['beta']),
pt_ll = convert(t_ll, type = 'power', param = x['beta']),
d = x['w'] * (um_ll - um_ss) - (1 - x['w']) * (pt_ll - pt_ss))
df
term1 <- exp(-2 * df$d * (x['theta'] + x['z']) / x['sigma']^2)
term1
df$d
x['theta']
x['z']
x['sigma']
x
term1 <- exp(-2 * df$d * (x['theta'] + x['z']) / x['s']^2)
term1
term1 > .Machine$double.xmax
.Machine$double.xmax
.Machine$double.max.exp
.Machine$double.xmax
term1 > .Machine$double.xmax
term1[term1 > .Machine$double.xmax,]
term1 > .Machine$double.xmax
term1[term1 > .Machine$double.xmax]
term1[,term1 > .Machine$double.xmax]
term1[term1 > .Machine$double.xmax,:]
term1[term1 > .Machine$double.xmax,]
term1[term1 > .Machine$double.xmax]
dplyr::filter(term1 > .Machine$double.xmax)
term1
term1[term1 > .Machine$double.xmax] <- .Machine$double.xmax
term1
library(itchmodel)
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 20
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 20
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
term1
term2
term1
term2
term2[term2 > .Machine$double.xmax]
term2[term2 > .Machine$double.xmax] <- .Machine$double.xmax
term2
library(itchmodel)
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 20
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
replace_inf(term1)
term1
term2
# frames <- c('date', 'delay')
# t_s <- c(0, 7)
# interval <- c(1,2,3,5,7,10,14)
# m_l <- c(19.68, 20.32)
# pct_m_l <- c(0.2, 0.5, 0.7, 0.8, 0.88, 0.93, 0.97, 0.99)
#
# df <- expand.grid(frame = frames,
#                   pct_m_l = pct_m_l,
#                   m_l = m_l,
#                   t_s = t_s,
#                   interval = interval
#                   )
# df$m_s <- df$pct_m_l * df$m_l
# df$t_l <- df$t_s + df$interval
frames <- c('delay', 'date')
t_ss <- 0
interval <- c(1,10,21,50,90,180)
m_ss <- 20
m_ll <- m_ss + c(1, 2, 4, 8, 16, 32, 64, 128)
df <- expand.grid(frame = frames,
m_ss = m_ss,
m_ll = m_ll,
t_ss = t_ss,
t_ll = t_ss + interval)
tib <-
tibble::as.tibble(df)
# %>%
#   dplyr::mutate(t_ll = factor(t_ll))
# Parameters ---
parameters <- list('alpha' = c(0.6, 0.75), # Alpha varies between conditions
'beta' = 0.9,
'w' = 0.5,
's' = 1,
'z' = 0,
'theta' = 20
)
# Simulate data, given one condition
# sim_data <- simulate_data(parameters = parameters,
#                           n = n, # Number of trials
#                           model = 'itc_diffusion'
#                           )
# Repeat parameters, if stationary across conditions
parameters <- eq_list_elements(parameters)
# Make a parameter tib
parameters_tib <-
parameters %>%
tibble::as.tibble() %>%
dplyr::mutate(frame = factor(frames, levels = frames)) %>%
dplyr::select(frame, dplyr::everything()) %>%
dplyr::group_by(frame) %>%
tidyr::nest(.key = 'parameters')
tib <-
tib %>%
dplyr::group_by(frame) %>%
tidyr::nest() %>%
dplyr::left_join(parameters_tib, by = 'frame')
purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
bla <- purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
bla
tib
bla
rtdists::n1PDF
tib$probs <- purrr::map2(tib$data, tib$parameters, itchmodel::dai_busemeyer_diffusion)
tib
tib$probs
rbind(tib$probs)
dplyr::bind_rows(tib$probs)
ggplot2::ggplot(mytib,
ggplot2::aes(x = m_l,
y = p_ll,
color = t_l,
group = t_l)
) +
# ggplot2::facet_grid(t_s ~ t_l) +
ggplot2::geom_line() +
ggplot2::geom_point()
# Make one tibble
(mytib <- dplyr::bind_rows(tib$probs))
# Make one tibble
(mytib <-
dplyr::bind_rows(tib$probs) %>%
dplyr::mutate(t_ll = factor(t_ll))
)
ggplot2::ggplot(mytib,
ggplot2::aes(x = m_ll,
y = prob_ll,
color = t_ll,
group = t_ll)
) +
# ggplot2::facet_grid(t_s ~ t_l) +
ggplot2::geom_line() +
ggplot2::geom_point()
